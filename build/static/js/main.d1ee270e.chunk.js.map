{"version":3,"sources":["Episode.js","App.js","serviceWorker.js","index.js"],"names":["Episode","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","backToCalendar","back","state","loading","response","day","month","fetch","year","json","setState","react_default","a","createElement","onClick","map","item","key","id","name","Component","App","dicrementMonth","indicatedMonth","indicatedYear","incrementMonth","date","Date","getMonth","getFullYear","indicatedDay","firstView","bind","assertThisInitialized","dayInMonth","getDate","result","i","push","console","log","_this2","calendar","daysInMonth","doRequest","toString","className","src_Episode","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.d1ee270e.chunk.js","sourcesContent":["import React, { Component } from 'react';\r\nimport { AsyncSeriesWaterfallHook } from 'tapable';\r\n\r\nclass Episode extends Component{\r\n    constructor(props){\r\n        super(props)\r\n        this.state = {\r\n            loading: true,\r\n            response: null\r\n        }\r\n    }\r\n    backToCalendar = () =>{\r\n        this.props.back();\r\n    }\r\n    async componentWillMount(){\r\n        let day = this.props.day;\r\n        let month = this.props.month;\r\n        if( month<10 ){ month = '0'+ month}\r\n        if( day<10 ){ day = '0'+ day}\r\n        const response = await fetch('http://api.tvmaze.com/schedule?country=US&date=' + \r\n            this.props.year + '-' + month + '-' + day)\r\n        const json = await response.json();\r\n        this.setState({\r\n            response:json,\r\n            loading:false\r\n        })\r\n        \r\n    }\r\n    render(){\r\n        return(<div>\r\n                {this.state.loading ? \r\n                <div>loading</div>\r\n                :\r\n                <div>\r\n                    <button onClick={this.backToCalendar}>BACK</button>\r\n                    <ul>\r\n                        {this.state.response.map((item)=><li key={item.id}>{item.name}</li>)}\r\n                    </ul>\r\n                </div>\r\n                }\r\n            </div>\r\n        );\r\n    }\r\n}\r\nexport default Episode;","import React, { Component } from 'react';\nimport Episode from './Episode';\nimport './App.css';\n\nclass App extends Component {\n  constructor(props) {\n    super(props);\n    let date = new Date();\n    this.state = {\n      indicatedMonth: date.getMonth(),\n      indicatedYear: date.getFullYear(),\n      indicatedDay: null,\n      firstView:true\n    }\n    this.backToCalendar = this.backToCalendar.bind(this);\n  }\n  backToCalendar(){\n    this.setState({\n      firstView: true,\n      indicatedDay: null\n    })\n  }\n  daysInMonth(month, year) {\n    let dayInMonth = new Date(year, month, 0).getDate();\n    let result = [];\n    for (let i = 1; i <= dayInMonth; i++) {\n      result.push(i);\n    }\n    return result;\n  }\n  dicrementMonth = () => {\n    if (this.state.indicatedMonth > 1) {\n      this.setState({ indicatedMonth: this.state.indicatedMonth - 1 });\n    } else {\n      this.setState({\n        indicatedYear: this.state.indicatedYear - 1,\n        indicatedMonth: 12\n      });\n    }\n  };\n  incrementMonth = () => {\n    if (this.state.indicatedMonth < 12) {\n      this.setState({ indicatedMonth: this.state.indicatedMonth + 1 });\n    } else {\n      this.setState({\n        indicatedYear: this.state.indicatedYear + 1,\n        indicatedMonth: 1\n      });\n    }\n  };\n  doRequest(item) {   \n    console.log(item);\n    this.setState({\n      firstView: false,\n      indicatedDay: item\n    })\n\n\n  }\n  render() {\n    const days = this.daysInMonth(this.state.indicatedMonth, this.state.indicatedYear);\n    const calendar = days.map((item) => \n    <li onClick={() => {this.doRequest(item)} } \n        key={item.toString()}>\n        {item.toString()}\n    </li>)      \n    return (\n      <div className=\"App\">\n      {this.state.firstView ?\n      <div>\n          <a>This will be image</a>\n          <div>\n            <button onClick={this.dicrementMonth}> &lt; </button>\n            {this.state.indicatedMonth}\n            <button onClick={this.incrementMonth}> &gt; </button>\n            <ul>{calendar}</ul>\n          </div>\n        </div>\n        : \n        <div>\n          <Episode back={this.backToCalendar} \n                   day={this.state.indicatedDay} \n                   month={this.state.indicatedMonth} \n                   year={this.state.indicatedYear}/>\n          </div>\n        }        \n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}